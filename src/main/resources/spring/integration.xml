<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:si="http://www.springframework.org/schema/integration"
	xmlns:si-ftp="http://www.springframework.org/schema/integration/ftp"
	xmlns:amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:jms="http://www.springframework.org/schema/integration/jms"
	xmlns:stream="http://www.springframework.org/schema/integration/stream"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/ftp http://www.springframework.org/schema/integration/ftp/spring-integration-ftp-2.1.xsd
		http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp-2.1.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- Allow property place holders -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" />

	<!-- FTP - pick up the zoneinfo files once per 1 month (midnight on the 
		first day) -->
	<bean id="zoneinfoFtpClientFactory"
		class="org.springframework.integration.ftp.session.DefaultFtpSessionFactory">
		<property name="host" value="elsie.nci.nih.gov" />
		<property name="port" value="21" />
		<property name="username" value="anonymous" />
		<property name="password" value="anonymous" />
		<property name="clientMode" value="2" />
		<property name="bufferSize" value="100000" />
	</bean>

	<si-ftp:inbound-channel-adapter id="zoneInfoFtpInbound"
		channel="compressedZoneinfoChannel" session-factory="zoneinfoFtpClientFactory"
		charset="UTF-8" auto-create-local-directory="true"
		delete-remote-files="false" filename-pattern="tzdata*.tar.gz"
		remote-directory="pub" local-directory="${java.io.tmpdir}${file.separator}tzdata">
		<si:poller max-messages-per-poll="-1" trigger="startupCronTrigger" />
	</si-ftp:inbound-channel-adapter>

	<bean id="startupCronTrigger" class="org.springframework.samples.springtz.StartupCronTrigger">
		<constructor-arg value="0 0 0 1 * *" />
	</bean>

	<si:channel id="compressedZoneinfoChannel" datatype="java.io.File" />

	<!-- Decompress the tar.gz file into a collection of files. -->
	<si:splitter input-channel="compressedZoneinfoChannel" ref="tarGzDecompressor"
		method="decompress" output-channel="decompressedZoneinfoChannel" />

	<bean id="tarGzDecompressor" class="org.springframework.samples.springtz.TarGzDecompressor" />

	<si:channel id="decompressedZoneinfoChannel" datatype="java.io.File" />

	<!-- Pass on only the files that we know are zoneinfo files (there is no 
		telling file extension to check). -->
	<si:filter input-channel="decompressedZoneinfoChannel"
		expression="payload.name matches '(africa|antarctica|asia|australasia|backward|etcetera|europe|northamerica|pacificnew|solar87|solar88|solar89|southamerica|systemv).*'"
		output-channel="zoneinfoChannel" />

	<si:channel id="zoneinfoChannel" datatype="java.io.File" />

	<!-- Parse a zoneinfo file. -->
	<si:service-activator input-channel="zoneinfoChannel"
		ref="timeZoneService" method="parseZoneinfoFile" />

	<!-- An implementation of our service -->
	<bean id="timeZoneService" class="org.springframework.samples.springtz.TimeZoneService" />

	<!-- Wire up the tz service so that it can be called by anything in the 
		Java world such as the web service. -->

	<si:service-activator input-channel="idsQueueChannel"
		ref="timeZoneService" method="getAvailableIDs">
		<si:poller receive-timeout="30000" fixed-rate="10" />
	</si:service-activator>

	<si:service-activator input-channel="offsetQueueChannel"
		expression="@timeZoneService.getOffset(payload, headers.when)">
		<si:poller receive-timeout="30000" fixed-rate="10" />
	</si:service-activator>

	<si:channel id="idsRequestChannel" />
	
	<si:channel id="idsQueueChannel">
		<si:queue capacity="100" />
	</si:channel>

	<si:channel id="offsetRequestChannel" />

	<si:channel id="offsetQueueChannel">
		<si:queue capacity="100" />
	</si:channel>

	<!-- Wire up AMQP -->

	<amqp:outbound-gateway request-channel="idsRequestChannel"
		exchange-name="org.springframework.samples.springtz" routing-key="ids" />

	<amqp:inbound-gateway queue-names="org.springframework.samples.springtz.ids"
		request-channel="idsQueueChannel" connection-factory="amqpConnectionFactory" />

	<amqp:outbound-gateway request-channel="offsetRequestChannel"
		exchange-name="org.springframework.samples.springtz" routing-key="offset"
		amqp-template="amqpTemplate" />

	<amqp:inbound-gateway queue-names="org.springframework.samples.springtz.offset"
		request-channel="offsetQueueChannel" connection-factory="amqpConnectionFactory" />

	<!-- Configure RMQ -->
	<rabbit:connection-factory id="amqpConnectionFactory" />

	<rabbit:template id="amqpTemplate" connection-factory="amqpConnectionFactory" />

	<rabbit:admin connection-factory="amqpConnectionFactory" />

	<rabbit:queue name="org.springframework.samples.springtz.ids" />

	<rabbit:queue name="org.springframework.samples.springtz.offset" />

	<rabbit:direct-exchange name="org.springframework.samples.springtz">
		<rabbit:bindings>
			<rabbit:binding queue="org.springframework.samples.springtz.ids"
				key="ids" />
			<rabbit:binding queue="org.springframework.samples.springtz.offset"
				key="offset" />
		</rabbit:bindings>
	</rabbit:direct-exchange>

</beans>
